name: Piloofe CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: Quality & Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript type checking
      run: npm run check
    
    - name: Security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Check for outdated packages
      run: npm outdated
      continue-on-error: true

  # Build and Test
  build-and-test:
    name: Build & Test Application
    runs-on: ubuntu-latest
    needs: quality-checks
    
    outputs:
      build-cache-key: ${{ steps.cache-build.outputs.cache-hit }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Cache build artifacts
      id: cache-build
      uses: actions/cache@v3
      with:
        path: |
          dist/
          node_modules/
        key: build-${{ github.sha }}
        restore-keys: |
          build-${{ github.ref_name }}-
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: piloofe-build-${{ github.sha }}
        path: |
          dist/
          package.json
          package-lock.json
          server/
          shared/
        retention-days: 7
    
    - name: Test build output
      run: |
        ls -la dist/
        echo "✅ Build completed successfully"

  # Docker Build
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=staging,enable=${{ github.ref == 'refs/heads/develop' }}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: "${{ github.event.repository.name }}-sbom.spdx.json"
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ github.sha }}
        path: "${{ github.event.repository.name }}-sbom.spdx.json"

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: piloofe-build-${{ github.sha }}
        path: ./
    
    - name: Set up Docker Compose
      run: |
        # Install latest docker-compose
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create environment configuration
      run: |
        # Copy staging environment template
        cp .env.staging .env
        
        # Override with secrets
        echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" >> .env
        echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        echo "STRIPE_SECRET_KEY=${{ secrets.STAGING_STRIPE_SECRET_KEY }}" >> .env
        echo "VITE_STRIPE_PUBLIC_KEY=${{ secrets.STAGING_STRIPE_PUBLIC_KEY }}" >> .env
        echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> .env
        
        # Set image tag
        echo "PILOO_IMAGE_TAG=${{ needs.docker-build.outputs.image-tag }}" >> .env
    
    - name: Stop existing containers
      run: |
        docker-compose down --remove-orphans || true
        docker system prune -f
    
    - name: Deploy application
      run: |
        # Pull latest images
        docker-compose pull
        
        # Start services
        docker-compose up -d
        
        # Wait for services to be healthy
        echo "Waiting for services to start..."
        sleep 45
    
    - name: Verify deployment
      run: |
        # Check service status
        docker-compose ps
        
        # Wait for application to be ready
        timeout=180
        while [ $timeout -gt 0 ]; do
          if curl -f http://localhost:5000/api/health; then
            echo "✅ Application is healthy!"
            break
          fi
          echo "Waiting for application... ($timeout seconds remaining)"
          sleep 10
          timeout=$((timeout-10))
        done
        
        if [ $timeout -le 0 ]; then
          echo "❌ Application health check failed"
          docker-compose logs piloo-app
          exit 1
        fi
    
    - name: Run database migrations
      run: |
        docker-compose exec -T piloo-app npm run db:push || true
    
    - name: Clean up old Docker images
      run: |
        docker image prune -f
        docker system prune -f

  # Production Deployment (Manual trigger only)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "🚀 Deploying to production..."
        echo "This would typically involve deployment to your production infrastructure"
        echo "Image: ${{ needs.docker-build.outputs.image-tag }}"
        echo "Digest: ${{ needs.docker-build.outputs.image-digest }}"

  # Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [quality-checks, build-and-test, docker-build, deploy-staging]
    if: always()
    
    steps:
    - name: Checkout for git info
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get commit info
      id: commit-info
      run: |
        COMMIT_MSG=$(git log -1 --pretty=format:"%s" | head -c 100)
        COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
        COMMIT_HASH=$(git log -1 --pretty=format:"%h")
        COMMIT_DATE=$(git log -1 --pretty=format:"%ad" --date=iso)
        
        echo "message=$COMMIT_MSG" >> $GITHUB_OUTPUT
        echo "author=$COMMIT_AUTHOR" >> $GITHUB_OUTPUT
        echo "hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
        echo "date=$COMMIT_DATE" >> $GITHUB_OUTPUT
    
    - name: Determine overall status
      id: status
      run: |
        # Check if all critical jobs succeeded
        if [[ "${{ needs.quality-checks.result }}" == "success" && 
              "${{ needs.build-and-test.result }}" == "success" && 
              ("${{ needs.docker-build.result }}" == "success" || "${{ needs.docker-build.result }}" == "skipped") && 
              ("${{ needs.deploy-staging.result }}" == "success" || "${{ needs.deploy-staging.result }}" == "skipped") ]]; then
          echo "status=SUCCESS" >> $GITHUB_OUTPUT
          echo "color=green" >> $GITHUB_OUTPUT
          echo "icon=✅" >> $GITHUB_OUTPUT
        else
          echo "status=FAILURE" >> $GITHUB_OUTPUT
          echo "color=red" >> $GITHUB_OUTPUT
          echo "icon=❌" >> $GITHUB_OUTPUT
        fi
    
    - name: Send Slack notification
      if: always() && (success() || failure())
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "${{ steps.status.outputs.icon }} Piloofe Pipeline ${{ steps.status.outputs.status }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*${{ steps.status.outputs.icon }} Piloofe Pipeline ${{ steps.status.outputs.status }}*\n\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ steps.commit-info.outputs.hash }} by ${{ steps.commit-info.outputs.author }}\n*Message:* ${{ steps.commit-info.outputs.message }}\n\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow Run>"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Send Email notification
      if: always() && secrets.EMAIL_USERNAME != ''
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "${{ steps.status.outputs.icon }} Piloofe - Build ${{ github.run_number }} - ${{ steps.status.outputs.status }}"
        to: ${{ secrets.NOTIFICATION_EMAILS }}
        from: ${{ secrets.EMAIL_USERNAME }}
        html_body: |
          <!DOCTYPE html>
          <html>
          <head>
              <style>
                  .container { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; }
                  .header { background-color: ${{ steps.status.outputs.color }}; color: white; padding: 20px; text-align: center; }
                  .content { padding: 20px; border: 1px solid #ddd; }
                  .footer { background-color: #f5f5f5; padding: 10px; text-align: center; font-size: 12px; }
                  .status-success { color: #28a745; }
                  .status-failure { color: #dc3545; }
                  .commit-info { background-color: #f8f9fa; padding: 15px; border-left: 4px solid ${{ steps.status.outputs.color }}; margin: 15px 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>${{ steps.status.outputs.icon }} Piloofe Pipeline</h1>
                      <h2>Build ${{ github.run_number }} - ${{ steps.status.outputs.status }}</h2>
                  </div>
                  
                  <div class="content">
                      <div class="commit-info">
                          <h3>📝 Commit Information</h3>
                          <p><strong>Hash:</strong> ${{ steps.commit-info.outputs.hash }}</p>
                          <p><strong>Author:</strong> ${{ steps.commit-info.outputs.author }}</p>
                          <p><strong>Message:</strong> ${{ steps.commit-info.outputs.message }}</p>
                          <p><strong>Date:</strong> ${{ steps.commit-info.outputs.date }}</p>
                          <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
                      </div>
                      
                      <h3>🔍 Job Results</h3>
                      <ul>
                          <li>Quality Checks: <span class="status-${{ needs.quality-checks.result }}">${{ needs.quality-checks.result }}</span></li>
                          <li>Build & Test: <span class="status-${{ needs.build-and-test.result }}">${{ needs.build-and-test.result }}</span></li>
                          <li>Docker Build: <span class="status-${{ needs.docker-build.result }}">${{ needs.docker-build.result }}</span></li>
                          <li>Deploy Staging: <span class="status-${{ needs.deploy-staging.result }}">${{ needs.deploy-staging.result }}</span></li>
                      </ul>
                      
                      <p><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" style="background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">View Full Workflow Run</a></p>
                  </div>
                  
                  <div class="footer">
                      <p>Generated by GitHub Actions • ${{ github.repository }}</p>
                  </div>
              </div>
          </body>
          </html>

