name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run check

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 1

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create .env file for staging
        run: |
          cp .env.staging .env
          echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" >> .env
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "STRIPE_SECRET_KEY=${{ secrets.STAGING_STRIPE_SECRET_KEY }}" >> .env
          echo "VITE_STRIPE_PUBLIC_KEY=${{ secrets.STAGING_STRIPE_PUBLIC_KEY }}" >> .env
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> .env
          echo "SMTP_SERVER=${{ secrets.SMTP_SERVER }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_USERNAME=${{ secrets.EMAIL_USERNAME }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env

      - name: Deploy with Docker Compose
        run: |
          docker-compose down --remove-orphans || true
          docker-compose pull
          docker-compose up -d --build

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to start..."
          sleep 30
          docker-compose ps

      - name: Run database migrations
        run: |
          docker-compose exec -T piloo-app npm run db:push

      - name: Health check
        run: |
          curl -f http://localhost:5000/api/health || exit 1

      - name: Clean up old images
        run: |
          docker system prune -f

  notify:
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build, deploy-staging]
    if: always()
    steps:
      - name: Get Git Changes
        id: git-changes
        run: |
          CHANGES=$(git log -1 --pretty=format:"%h by %an on %ad: %s" --date=iso)
          echo "changes=$CHANGES" >> $GITHUB_OUTPUT

      - name: Determine overall status
        id: status
        run: |
          if [[ "${{ needs.build-and-test.result }}" == "success" && "${{ needs.docker-build.result }}" == "success" && ("${{ needs.deploy-staging.result }}" == "success" || "${{ needs.deploy-staging.result }}" == "skipped") ]]; then
            echo "status=SUCCESS" >> $GITHUB_OUTPUT
            echo "color=green" >> $GITHUB_OUTPUT
          else
            echo "status=FAILURE" >> $GITHUB_OUTPUT
            echo "color=red" >> $GITHUB_OUTPUT
          fi

      - name: Send Email Notification
        if: always()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "${{ github.repository }} - Build ${{ github.run_number }} - ${{ steps.status.outputs.status }}"
          to: ${{ secrets.NOTIFICATION_EMAILS }}
          from: ${{ secrets.EMAIL_USERNAME }}
          html_body: |
            <html>
              <body>
                <div style="border: 4px solid ${{ steps.status.outputs.color }}; padding: 10px;">
                  <h2>${{ github.repository }} - Build ${{ github.run_number }}</h2>
                  <div style="background-color: ${{ steps.status.outputs.color }}; padding: 10px;">
                    <h3 style="color: white;">Pipeline Status: ${{ steps.status.outputs.status }}</h3>
                  </div>
                  <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
                  <p><strong>Commit:</strong> ${{ steps.git-changes.outputs.changes }}</p>
                  <p><strong>Triggered by:</strong> ${{ github.actor }}</p>
                  <p><strong>Build Results:</strong></p>
                  <ul>
                    <li>Build & Test: ${{ needs.build-and-test.result }}</li>
                    <li>Docker Build: ${{ needs.docker-build.result }}</li>
                    <li>Deploy Staging: ${{ needs.deploy-staging.result }}</li>
                  </ul>
                  <p>Check the <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">workflow run</a> for details.</p>
                </div>
              </body>
            </html>
